// Generated by CoffeeScript 1.6.3
/*
Single-Page UI for network visualizer.
keroserene@google.com  (Serene Han)
*/


(function() {
  define(['domReady', 'jQuery', 'underscore'], function(domReady, $, _) {
    var ButterBar, View, Vis, VisActions, VisForm, VisIndex, fadeHide, fadeShow, gButter;
    gButter = null;
    Vis = (function() {
      var ID_PREFIX;

      ID_PREFIX = '#v-';

      function Vis(id, name, url, isPublic) {
        this.id = id;
        this.name = name;
        this.url = url;
        this.isPublic = isPublic;
        this.entry = $(ID_PREFIX + this.id);
      }

      return Vis;

    })();
    fadeHide = function(element) {
      var _this = this;
      element.addClass('hidden');
      return element.hideTimer = setTimeout((function() {
        return element.hide();
      }), 300);
    };
    fadeShow = function(element) {
      var _this = this;
      element.show();
      setTimeout((function() {
        return element.removeClass('hidden');
      }), 10);
      if (element.hideTimer) {
        clearTimeout(element.hideTimer);
        return element.hideTimer = null;
      }
    };
    /*
    Maintains State about all of the user's visualizations.
    */

    VisIndex = (function() {
      var JSON_DATA_URL;

      JSON_DATA_URL = '/data.json';

      function VisIndex() {
        this.newEntryIsPending = false;
        this.$index = $('#vis-index');
        this.visualizations = [];
        this.visByID = {};
        this.data = null;
      }

      VisIndex.prototype.show = function() {
        return fadeShow(this.$index);
      };

      VisIndex.prototype.hide = function() {
        return fadeHide(this.$index);
      };

      VisIndex.prototype.updateData = function(data) {
        var _this = this;
        console.log(this.visByID);
        _.each(data, function(datum) {
          var id, isPublic, name, spreadsheet, vis;
          id = datum[0], name = datum[1], spreadsheet = datum[2], isPublic = datum[3];
          if (!_this.visByID.hasOwnProperty(id)) {
            vis = new Vis(id, name, spreadsheet, isPublic);
            _this.visualizations.push(vis);
            return _this.visByID[id] = vis;
          } else {
            return console.log('vis ' + id + ' already exists.');
          }
        });
        return this.data = data;
      };

      VisIndex.prototype.refresh = function() {
        return console.log('refreshing index.');
      };

      return VisIndex;

    })();
    /*
    Holds state for the actions panel.
    */

    VisActions = (function() {
      function VisActions() {
        this.$actions = $('#vis-actions');
        this.$viewMode = $('#vis-view-mode');
      }

      VisActions.prototype.show = function(viewMode) {
        if (viewMode == null) {
          viewMode = true;
        }
        if (viewMode) {
          this.$viewMode.show();
        } else {
          this.$viewMode.hide();
        }
        return fadeShow(this.$actions);
      };

      VisActions.prototype.hide = function() {
        return fadeHide(this.$actions);
      };

      return VisActions;

    })();
    VisForm = (function() {
      function VisForm(view) {
        this.view = view;
        this.$form = $('#vis-form-panel');
        this.$formData = $('#vis-form');
        this.$index = $('#vis-index');
        this.$create = $('#btn-create');
        this.$nameInput = $('#input_name');
        this.$spreadsheetInput = $('#input_url');
        this.$publicInput = $('#input_public');
        this.$IDinput = $('#input_id');
        this.$save = $('#btn-save');
      }

      VisForm.prototype.show = function() {
        return fadeShow(this.$form);
      };

      VisForm.prototype.hide = function() {
        return fadeHide(this.$form);
      };

      VisForm.prototype.prefill = function(vis) {
        console.log(vis);
        this.$nameInput.val(vis.name);
        this.$spreadsheetInput.val('https://docs.google.com/a/google.com/spreadsheet/ccc?key=' + vis.url);
        this.$publicInput[0].checked = vis.isPublic;
        return this.$IDinput.val(vis.id);
      };

      VisForm.prototype.clearForm = function() {
        this.$nameInput.val('');
        this.$spreadsheetInput.val('');
        this.$publicInput.checked = false;
        return this.$IDinput.val('');
      };

      VisForm.prototype.saveOrCreate = function() {
        var success;
        if (!validEntry('id_name', 'Please name your visualization.') || !validEntry('id_spreadsheet_link', 'Please provide a valid spreadsheet link.')) {
          return;
        }
        success = false;
        if (gEditMode) {
          success = updateVis();
        } else {
          success = createVis();
          awaitUpdate();
        }
        if (success) {
          return resetSidebar();
        }
      };

      /*
      Send AJAX POST to create new visualization.
      Updates local DOM to indicate the new graph.
      */


      VisForm.prototype.createVis = function() {
        var data, name;
        data = this.$formData.serialize();
        $.post('/graph/create/', data, function() {
          console.log('created!');
          return true;
        });
        name = $('#input_name').val();
        console.log('making a new thingy...' + name);
        return true;
      };

      /*
      Update visualization's meta-data.
      */


      VisForm.prototype.updateVis = function(vis) {
        var data, newName, newSpreadsheet, oldID, oldSpreadsheet, sMatch,
          _this = this;
        sMatch = this.$spreadsheetInput.val().match(/ccc\?key=(.*)/);
        if (null === sMatch) {
          console.log('invalid');
          return false;
        }
        newSpreadsheet = sMatch[1];
        oldSpreadsheet = vis.url;
        oldID = vis.id;
        data = this.$formData.serialize();
        $.post('/graph/' + vis.id + '/update/', data, function() {
          console.log('updated');
          if (newSpreadsheet !== oldSpreadsheet) {
            return setTimeout(refreshGraph, 100);
          }
        });
        console.log('update!');
        vis.name = newName;
        newName = this.$nameInput.val();
        this.view.$name.html(newName);
        vis.name = newName;
        vis.entry.find('.vis-entry-name').html(newName);
        vis.url = newSpreadsheet;
        vis.isPublic = this.$publicInput.checked;
        return true;
      };

      return VisForm;

    })();
    View = (function() {
      var EDITING, INDEX, VIEWING;

      INDEX = 0;

      VIEWING = 1;

      EDITING = 2;

      function View(options) {
        this.$view = $('#view');
        this.$loading = $('#view-loading');
        this.$frame = $('#ajax-view').find('.vis-frame');
        this.currentID = null;
        this.editMode = false;
        this.$name = $('#view-name');
        this.state = this.INDEX;
      }

      View.prototype.edit = function() {
        return this.editMode = true;
      };

      View.prototype.show = function(id) {
        fadeShow(this.$loading);
        this.loadURL('/graph/' + id);
        return this.currentID = id;
      };

      View.prototype.loadURL = function(url) {
        var _this = this;
        this.$view.load(url + ' #ajax-view', function() {
          _this.$frame = $('#ajax-view').find('.vis-frame');
          return _this.$loading.hide();
        });
        this.$view.removeClass('hidden');
        return this.$view.show();
      };

      View.prototype.refresh = function() {
        var cachedGraphID,
          _this = this;
        if (!this.currentID) {
          return;
        }
        console.log('refreshing');
        cachedGraphID = this.currentID;
        $.get('/graph/' + this.currentID + '/reload/', [], function() {
          $('#btn-refresh').removeClass('disabled');
          gButter.show('Visualization data refreshed!');
          if (cachedGraphID === _this.currentID) {
            return _this.show(_this.currentID);
          }
        });
        return gButter.show('Refreshing data from spreadsheet...', false);
      };

      View.prototype.clear = function() {
        var _this = this;
        this.$view.empty();
        fadeHide(this.$loading);
        fadeHide(this.$view);
        window.history.pushState({}, null, '/');
        window.addEventListener('popstate', function(e) {
          return _this.show(_this.currentID);
        });
        return this.currentID = null;
      };

      return View;

    })();
    /*
    Class describing the butterbar for temporary feedback messages.
    */

    ButterBar = (function() {
      ButterBar.prototype.TIMEOUT_MS = 1800;

      function ButterBar() {
        var _this = this;
        this.bar = $('#butterbar');
        this.text = $('#butterbar-text');
        this.dismissButton = $('#butterbar-dismiss');
        this.dismissButton.click(function() {
          return _this.hide();
        });
      }

      ButterBar.prototype.show = function(message, autohide) {
        var timeout,
          _this = this;
        if (!message) {
          return;
        }
        this.reset();
        if (void 0 === autohide) {
          autohide = true;
        }
        this.text.html(message);
        this.bar.removeClass('hidden');
        if (autohide) {
          timeout = setTimeout(function() {
            return _this.bar.addClass('hidden');
          });
          return this.TIMEOUT_MS;
        }
      };

      ButterBar.prototype.showError = function(message) {
        this.reset();
        this.show('ERROR: ' + message, false);
        this.bar.addClass('error');
        this.dismissButton.removeClass('hidden');
        return this.dismissButton.show();
      };

      ButterBar.prototype.hide = function() {
        return this.bar.addClass('hidden');
      };

      ButterBar.prototype.reset = function() {
        if (this.timeout) {
          window.clearTimeout(this.timeout);
          this.timeout = null;
        }
        this.bar.removeClass('error');
        this.dismissButton.addClass('hidden');
        this.dismissButton.hide();
        return this.text.html('');
      };

      return ButterBar;

    })();
    return domReady(function() {
      var $back, $edit, $tt, $visEntries, gActions, gForm, gIndex, gView, hideTooltip, hookTooltip, returnToIndex, showTooltip;
      gButter = new ButterBar();
      gActions = new VisActions();
      gView = new View(gActions);
      gIndex = new VisIndex();
      gForm = new VisForm(gView);
      returnToIndex = function() {
        var currentVis;
        currentVis = gIndex.visByID[gView.currentID];
        if (currentVis) {
          currentVis.entry.removeClass('selected');
        }
        gIndex.show();
        gView.clear();
        gActions.hide();
        return gForm.hide();
      };
      gIndex.updateData(INIT_JSON_DATA);
      if (GRAPH_ID) {
        gView.currentID = GRAPH_ID;
      }
      $visEntries = $('.vis-entry');
      _.each(gIndex.visualizations, function(vis) {
        var _this = this;
        console.log(vis);
        return vis.entry.click(function() {
          vis.entry.addClass('selected');
          gActions.show();
          window.setTimeout((function() {
            return gView.show(vis.id);
          }), 300);
          $('#view-name').html(vis.name);
          window.history.pushState({}, null, 'view/' + vis.id);
          return window.addEventListener('popstate', function(e) {
            e.preventDefault();
            return returnToIndex();
          });
        });
      });
      $back = $('#btn-back');
      $back.click(function(e) {
        e.preventDefault();
        if (gView.editMode) {
          gView.editMode = false;
          console.log('returningfromedit ' + gView.currentID);
          gForm.hide();
          return fadeShow(gActions.$viewMode);
        } else {
          return returnToIndex();
        }
      });
      gForm.$create.click(function() {
        var viewMode;
        gIndex.hide();
        gForm.clearForm();
        gForm.show();
        return gActions.show(viewMode = false);
      });
      gForm.$save.click(function(e) {
        var vis;
        e.preventDefault();
        if (gView.currentID) {
          vis = gIndex.visByID[gView.currentID];
          gForm.updateVis(vis);
          $back.click();
        } else {
          gForm.createVis();
          gForm.hide();
        }
        return true;
      });
      $(document).ajaxError(function(request, text, error) {
        console.log('ajax error.');
        gButter.showError('Something went wrong (' + request.responseText + ') ' + 'OAuth probably needs to reauthorize.');
        $('#pending').remove();
        return $('#btn-refresh').removeClass('disabled');
      });
      /*
      Handler for clicking on "EDIT".
      Needs to update the form entries to match the parameters for the currently
      selected visualization
      */

      $edit = $('#btn-edit');
      $edit.click(function(e) {
        e.preventDefault();
        gView.editMode = true;
        gForm.prefill(gIndex.visByID[gView.currentID]);
        gForm.show();
        gForm.$nameInput.focus();
        return fadeHide(gActions.$viewMode);
      });
      $tt = $('#tooltip');
      showTooltip = function(tool, tip) {
        var ofs;
        ofs = tool.offset();
        $tt.removeClass('hidden');
        $tt.html(tip);
        return $tt.css(ofs);
      };
      hideTooltip = function() {
        return fadeHide($tt);
      };
      hookTooltip = function(tool, tip) {
        show = -> showTooltip tool, tip
        tool.hover(showTooltip(tool, tip), hideTooltip);
        tool.focus(showTooltip(tool, tip));
        return tool.blur(hideTooltip);
      };
      hookTooltip($back, 'back');
      hookTooltip($edit, 'edit');
      $('#btn-refresh').click(function(e) {
        e.preventDefault();
        return gView.refresh();
      });
      $('#btn-embed').click(function(e) {
        e.preventDefault();
        return console.log('share link');
      });
      $('#btn-save-positions').click(function(e) {
        var queryString, updateUrl;
        e.preventDefault();
        queryString = gView.$frame[0].contentWindow.getPositionQuery();
        updateUrl = '?' + queryString;
        return window.history.pushState({}, 'unused', updateUrl);
      });
      return $(document).keydown(function(e) {
        if (e.keyCode === 27) {
          return $back.click();
        }
      });
      /*
      # Primary button handlers.
      # The "save" button switches innerHTML between "Save" and "Create"
      # depending on if the opened dialogue is an edit or a new visualization.
      $('#btn-save').click(saveOrCreate);
      $('#btn-delete').click(deleteGraph);
      $('#btn-embed').click(toggleEmbedLink);
      # Tooltips.
      $('#btn-refresh').hover(
        function() { showToolTip($('#tooltip-refresh')); },
        function() { hideToolTip($('#tooltip-refresh')); });
      
      # Help
      $('#link-help').click(function(ev) {
        ev.preventDefault();
        window.history.pushState({}, 'unused', '/help/');
        showHelp();
      });
      
      #Dark mode
      $('#darkmode').click(function() {
        var vis = gDOM.graphFrame.contents();
        // $('#visualization')
        var graph = $('.graph', vis);
        graph.addClass('dark');
        $('.node-circle', graph).attr('class', function(i, o) {
          return o.replace('node-circle', 'node-circle-dark');
        });
        $('.label-text', graph).attr('class', 'label-text-dark');
      */

    });
  });

}).call(this);
